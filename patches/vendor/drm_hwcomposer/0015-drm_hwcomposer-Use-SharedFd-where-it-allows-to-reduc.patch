From ce9b4e8705bdf28583b5fd17928402580ce47f19 Mon Sep 17 00:00:00 2001
From: Roman Stratiienko <r.stratiienko@gmail.com>
Date: Tue, 3 Jan 2023 12:04:22 +0200
Subject: [PATCH 15/15] drm_hwcomposer: Use SharedFd where it allows to reduce
 dup() usage

Change-Id: I1b7df2c18ec096f5dba0f2d978234e69fbf70ab6
Signed-off-by: Roman Stratiienko <r.stratiienko@gmail.com>
---
 compositor/CompositorClassic.cpp |  2 +-
 compositor/LayerData.h           | 11 +----------
 drm/DrmAtomicStateManager.cpp    | 22 +++++++++++-----------
 drm/DrmAtomicStateManager.h      |  4 ++--
 drm/DrmPlane.cpp                 |  2 +-
 hwc2_device/HwcDisplay.cpp       |  6 +++---
 hwc2_device/HwcDisplay.h         |  2 +-
 hwc2_device/HwcLayer.cpp         |  8 ++------
 hwc2_device/HwcLayer.h           |  3 ---
 utils/UniqueFd.h                 | 11 +++++++++++
 10 files changed, 33 insertions(+), 38 deletions(-)

diff --git a/compositor/CompositorClassic.cpp b/compositor/CompositorClassic.cpp
index 51e05ad140b027..06eb7b49993917 100644
--- a/compositor/CompositorClassic.cpp
+++ b/compositor/CompositorClassic.cpp
@@ -125,7 +125,7 @@ auto CompositorGeneric::PresentComposition(FEComposition &comp,
         stat_.failed_present++;
       return -EINVAL;
     }
-    composition_layers.emplace_back(ol.second->layer_data.Clone());
+    composition_layers.emplace_back(ol.second->layer_data);
   }
 
   /* Store plan to ensure shared planes won't be stolen by other display
diff --git a/compositor/LayerData.h b/compositor/LayerData.h
index ff61c8bcb52ae9..2dc1371b491e92 100644
--- a/compositor/LayerData.h
+++ b/compositor/LayerData.h
@@ -70,19 +70,10 @@ struct PresentInfo {
 };
 
 struct LayerData {
-  auto Clone() {
-    LayerData clonned;
-    clonned.bi = bi;
-    clonned.fb = fb;
-    clonned.pi = pi;
-    clonned.acquire_fence = std::move(acquire_fence);
-    return clonned;
-  }
-
   std::optional<BufferInfo> bi;
   std::shared_ptr<DrmFbIdHandle> fb;
   PresentInfo pi;
-  UniqueFd acquire_fence;
+  SharedFd acquire_fence;
 };
 
 }  // namespace android
diff --git a/drm/DrmAtomicStateManager.cpp b/drm/DrmAtomicStateManager.cpp
index a045334452a309..1ea05d9946e6e0 100644
--- a/drm/DrmAtomicStateManager.cpp
+++ b/drm/DrmAtomicStateManager.cpp
@@ -153,10 +153,10 @@ auto DrmAtomicStateManager::CommitFrame(AtomicCommitArgs &args) -> int {
     ATRACE_NAME("WaitPriorFramePresented");
 
     constexpr int kTimeoutMs = 500;
-    const int err = sync_wait(last_present_fence_.Get(), kTimeoutMs);
+    const int err = sync_wait(*last_present_fence_, kTimeoutMs);
     if (err != 0) {
-      ALOGE("sync_wait(fd=%i) returned: %i (errno: %i)",
-            last_present_fence_.Get(), err, errno);
+      ALOGE("sync_wait(fd=%i) returned: %i (errno: %i)", *last_present_fence_,
+            err, errno);
     }
 
     CleanupPriorFrameResources();
@@ -175,10 +175,12 @@ auto DrmAtomicStateManager::CommitFrame(AtomicCommitArgs &args) -> int {
     return err;
   }
 
+  args.out_fence = MakeSharedFd(out_fence);
+
   if (nonblock) {
     {
       const std::unique_lock lock(mutex_);
-      last_present_fence_ = UniqueFd::Dup(out_fence);
+      last_present_fence_ = args.out_fence;
       staged_frame_state_ = std::move(new_frame_state);
       frames_staged_++;
     }
@@ -187,8 +189,6 @@ auto DrmAtomicStateManager::CommitFrame(AtomicCommitArgs &args) -> int {
     active_frame_state_ = std::move(new_frame_state);
   }
 
-  args.out_fence = UniqueFd(out_fence);
-
   return 0;
 }
 
@@ -198,7 +198,7 @@ void DrmAtomicStateManager::ThreadFn(
   auto &main_mutex = pipe_->device->GetResMan().GetMainLock();
 
   for (;;) {
-    UniqueFd present_fence;
+    SharedFd present_fence;
 
     {
       std::unique_lock lk(mutex_);
@@ -212,7 +212,7 @@ void DrmAtomicStateManager::ThreadFn(
 
       tracking_at_the_moment = frames_staged_;
 
-      present_fence = UniqueFd::Dup(last_present_fence_.Get());
+      present_fence = last_present_fence_;
       if (!present_fence)
         continue;
     }
@@ -221,10 +221,10 @@ void DrmAtomicStateManager::ThreadFn(
       // NOLINTNEXTLINE(misc-const-correctness)
       ATRACE_NAME("AsyncWaitForBuffersSwap");
       constexpr int kTimeoutMs = 500;
-      auto err = sync_wait(present_fence.Get(), kTimeoutMs);
+      auto err = sync_wait(*present_fence, kTimeoutMs);
       if (err != 0) {
-        ALOGE("sync_wait(fd=%i) returned: %i (errno: %i)", present_fence.Get(),
-              err, errno);
+        ALOGE("sync_wait(fd=%i) returned: %i (errno: %i)", *present_fence, err,
+              errno);
       }
     }
 
diff --git a/drm/DrmAtomicStateManager.h b/drm/DrmAtomicStateManager.h
index 55db2203aefc76..628df58ccacb85 100644
--- a/drm/DrmAtomicStateManager.h
+++ b/drm/DrmAtomicStateManager.h
@@ -38,7 +38,7 @@ struct AtomicCommitArgs {
   std::shared_ptr<DrmKmsPlan> composition;
 
   /* out */
-  UniqueFd out_fence;
+  SharedFd out_fence;
 
   /* helpers */
   auto HasInputs() const -> bool {
@@ -96,7 +96,7 @@ class DrmAtomicStateManager {
   void CleanupPriorFrameResources();
 
   KmsState staged_frame_state_;
-  UniqueFd last_present_fence_;
+  SharedFd last_present_fence_;
   int frames_staged_{};
   int frames_tracked_{};
 
diff --git a/drm/DrmPlane.cpp b/drm/DrmPlane.cpp
index a8ae1e8da63085..9d7adfdfe63588 100644
--- a/drm/DrmPlane.cpp
+++ b/drm/DrmPlane.cpp
@@ -279,7 +279,7 @@ auto DrmPlane::AtomicSetState(drmModeAtomicReq &pset, LayerData &layer,
   }
 
   if (layer.acquire_fence &&
-      !in_fence_fd_property_.AtomicSet(pset, layer.acquire_fence.Get())) {
+      !in_fence_fd_property_.AtomicSet(pset, *layer.acquire_fence)) {
     return -EINVAL;
   }
 
diff --git a/hwc2_device/HwcDisplay.cpp b/hwc2_device/HwcDisplay.cpp
index bc7c27c5c6b30c..fff40889511796 100644
--- a/hwc2_device/HwcDisplay.cpp
+++ b/hwc2_device/HwcDisplay.cpp
@@ -437,7 +437,7 @@ HWC2::Error HwcDisplay::GetReleaseFences(uint32_t *num_elements,
     }
 
     layers[num_layers - 1] = fl.first;
-    fences[num_layers - 1] = UniqueFd::Dup(present_fence_.Get()).Release();
+    fences[num_layers - 1] = dup(*present_fence_);
   }
   *num_elements = num_layers;
 
@@ -508,8 +508,8 @@ int HwcDisplay::TryPresentDisplayInt(int32_t *out_present_fence,
     }
   }
 
-  this->present_fence_ = UniqueFd::Dup(a_args.out_fence.Get());
-  *out_present_fence = a_args.out_fence.Release();
+  this->present_fence_ = a_args.out_fence;
+  *out_present_fence = dup(*a_args.out_fence);
 
   return 0;
 }
diff --git a/hwc2_device/HwcDisplay.h b/hwc2_device/HwcDisplay.h
index c80516bbe80f26..92c2e9d5906786 100644
--- a/hwc2_device/HwcDisplay.h
+++ b/hwc2_device/HwcDisplay.h
@@ -160,7 +160,7 @@ class HwcDisplay : public FEComposition {
 
   DrmHwcTwo *const hwc2_;
 
-  UniqueFd present_fence_;
+  SharedFd present_fence_;
 
   std::optional<DrmMode> staged_mode_;
   int64_t staged_mode_change_time_{};
diff --git a/hwc2_device/HwcLayer.cpp b/hwc2_device/HwcLayer.cpp
index 81c8b441cc856e..5e365e3c3e29af 100644
--- a/hwc2_device/HwcLayer.cpp
+++ b/hwc2_device/HwcLayer.cpp
@@ -80,7 +80,7 @@ HWC2::Error HwcLayer::SetLayerBlendMode(int32_t mode) {
  */
 HWC2::Error HwcLayer::SetLayerBuffer(buffer_handle_t buffer,
                                      int32_t acquire_fence) {
-  acquire_fence_ = UniqueFd(acquire_fence);
+  layer_data.acquire_fence = MakeSharedFd(acquire_fence);
   buffer_handle_ = buffer;
   buffer_handle_updated_ = true;
   pi_changed = true;
@@ -282,7 +282,7 @@ void HwcLayer::ImportFb() {
   }
 }
 
-bool HwcLayer::PopulateLayerData(bool test) {
+bool HwcLayer::PopulateLayerData(bool /*test*/) {
   ImportFb();
 
   if (!layer_data.bi) {
@@ -300,10 +300,6 @@ bool HwcLayer::PopulateLayerData(bool test) {
     layer_data.bi->sample_range = sample_range_;
   }
 
-  if (!test) {
-    layer_data.acquire_fence = std::move(acquire_fence_);
-  }
-
   return IsLayerUsableAsDevice();
 }
 
diff --git a/hwc2_device/HwcLayer.h b/hwc2_device/HwcLayer.h
index 334c43379c0726..aad6ad9a24740d 100644
--- a/hwc2_device/HwcLayer.h
+++ b/hwc2_device/HwcLayer.h
@@ -78,9 +78,6 @@ class HwcLayer : public FELayer {
   HWC2::Composition sf_type_ = HWC2::Composition::Invalid;
   HWC2::Composition validated_type_ = HWC2::Composition::Invalid;
 
-  /* Should be populated to layer_data_.acquire_fence only before presenting */
-  UniqueFd acquire_fence_;
-
   /* The following buffer data can have 2 sources:
    * 1 - Mapper@4 metadata API
    * 2 - HWC@2 API
diff --git a/utils/UniqueFd.h b/utils/UniqueFd.h
index f65bedc58ca769..6d62f6dda3546b 100644
--- a/utils/UniqueFd.h
+++ b/utils/UniqueFd.h
@@ -112,4 +112,15 @@ class UniqueFd {
   int fd_ = kEmptyFd;
 };
 
+using SharedFd = std::shared_ptr<int>;
+auto inline MakeSharedFd(int fd) -> SharedFd {
+  if (fd < 0)
+    return {};
+
+  return SharedFd(new int(fd), [](int *it) {
+    close(*it);
+    delete it;
+  });
+}
+
 }  // namespace android
-- 
2.37.2

