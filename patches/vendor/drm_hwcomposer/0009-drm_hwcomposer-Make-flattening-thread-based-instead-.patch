From dc6c08abbaa96feb1d27f9bb1643eaa5dc93a581 Mon Sep 17 00:00:00 2001
From: Roman Stratiienko <r.stratiienko@gmail.com>
Date: Fri, 30 Dec 2022 21:18:20 +0200
Subject: [PATCH 09/15] drm_hwcomposer: Make flattening thread-based instead of
 vsync-based

Using vsync means consume some CPU time every frame for
IRQ->Kernel Thread->UserSpace listener thread transitions.

Framework tries to reduce vsync usage to the minimum, by using timelines
instead.

New flattening controller thread wakes-up only once per second.

This commit also removes flattening info from dumpsys. Practice shows that
it is almost useless. Instead debugging can be done using ALOGV dumps.

Signed-off-by: Roman Stratiienko <r.stratiienko@gmail.com>
---
 Android.bp                 |  1 +
 backend/Backend.cpp        | 46 +++++++++++++++----------
 hwc2_device/HwcDisplay.cpp | 70 +++++++-------------------------------
 hwc2_device/HwcDisplay.h   | 21 ++++--------
 meson.build                |  1 +
 5 files changed, 48 insertions(+), 91 deletions(-)

diff --git a/Android.bp b/Android.bp
index 5610b8bb8c3b6a..8c4c95405d250d 100644
--- a/Android.bp
+++ b/Android.bp
@@ -60,6 +60,7 @@ filegroup {
         "bufferinfo/BufferInfoYagi.cpp",
 
         "compositor/DrmKmsPlan.cpp",
+        "compositor/FlatteningController.cpp",
 
         "drm/DrmAtomicStateManager.cpp",
         "drm/DrmConnector.cpp",
diff --git a/backend/Backend.cpp b/backend/Backend.cpp
index 45d0ab95fe62ad..ad823562f21492 100644
--- a/backend/Backend.cpp
+++ b/backend/Backend.cpp
@@ -32,28 +32,38 @@ void Backend::ValidateComposition(FEComposition &comp) {
 
   auto layers = GetOrderedLayers(comp, &client_start, &client_size);
 
-  if (display.ProcessClientFlatteningState(layers.size() <= 1)) {
-    display.total_stats().frames_flattened_++;
-    client_start = 0;
-    client_size = layers.size();
-    MarkClient(layers, client_start, client_size);
-  } else {
-    ExtendClientRange(display, layers, std::ref(client_start),
-                      std::ref(client_size));
+  auto flatcon = display.GetFlatCon();
+  if (flatcon) {
+    bool should_flatten = false;
+    if (layers.size() <= 1)
+      flatcon->Disable();
+    else
+      should_flatten = flatcon->NewFrame();
+
+    if (should_flatten) {
+      display.total_stats().frames_flattened_++;
+      client_start = 0;
+      client_size = layers.size();
+      MarkClient(layers, client_start, client_size);
+      return;
+    }
+  }
 
-    MarkClient(layers, client_start, client_size);
+  ExtendClientRange(display, layers, std::ref(client_start),
+                    std::ref(client_size));
 
-    auto testing_needed = client_start != 0 || client_size != layers.size();
+  MarkClient(layers, client_start, client_size);
 
-    AtomicCommitArgs a_args = {.test_only = true};
+  auto testing_needed = client_start != 0 || client_size != layers.size();
 
-    if (testing_needed &&
-        display.CreateComposition(a_args) != HWC2::Error::None) {
-      ++display.total_stats().failed_kms_validate_;
-      client_start = 0;
-      client_size = layers.size();
-      MarkClient(layers, 0, client_size);
-    }
+  AtomicCommitArgs a_args = {.test_only = true};
+
+  if (testing_needed &&
+      display.CreateComposition(a_args) != HWC2::Error::None) {
+    ++display.total_stats().failed_kms_validate_;
+    client_start = 0;
+    client_size = layers.size();
+    MarkClient(layers, 0, client_size);
   }
 
   display.total_stats().gpu_pixops_ += CalcPixOps(layers, client_start,
diff --git a/hwc2_device/HwcDisplay.cpp b/hwc2_device/HwcDisplay.cpp
index 5eda67f3274a20..62011c38485b13 100644
--- a/hwc2_device/HwcDisplay.cpp
+++ b/hwc2_device/HwcDisplay.cpp
@@ -50,32 +50,12 @@ std::string HwcDisplay::DumpDelta(HwcDisplay::Stats delta) {
 }
 
 std::string HwcDisplay::Dump() {
-  std::string flattening_state_str;
-  switch (flattenning_state_) {
-    case ClientFlattenningState::Disabled:
-      flattening_state_str = "Disabled";
-      break;
-    case ClientFlattenningState::NotRequired:
-      flattening_state_str = "Not needed";
-      break;
-    case ClientFlattenningState::Flattened:
-      flattening_state_str = "Active";
-      break;
-    case ClientFlattenningState::ClientRefreshRequested:
-      flattening_state_str = "Refresh requested";
-      break;
-    default:
-      flattening_state_str = std::to_string(flattenning_state_) +
-                             " VSync remains";
-  }
-
   auto connector_name = IsInHeadlessMode()
                             ? std::string("NULL-DISPLAY")
                             : GetPipe().connector->Get()->GetName();
 
   std::stringstream ss;
   ss << "- Display on: " << connector_name << "\n"
-     << "  Flattening state: " << flattening_state_str << "\n"
      << "Statistics since system boot:\n"
      << DumpDelta(total_stats_) << "\n\n"
      << "Statistics since last dumpsys request:\n"
@@ -140,6 +120,10 @@ void HwcDisplay::Deinit() {
 
     current_plan_.reset();
     backend_.reset();
+    if (flatcon_) {
+      flatcon_->StopThread();
+      flatcon_.reset();
+    }
   }
 
   if (vsync_worker_) {
@@ -162,14 +146,10 @@ HWC2::Error HwcDisplay::Init() {
               GetDisplayVsyncPeriod(&period_ns);
               hwc2_->SendVsyncEventToClient(handle_, timestamp, period_ns);
             }
-            if (vsync_flattening_en_) {
-              ProcessFlatenningVsyncInternal();
-            }
             if (vsync_tracking_en_) {
               last_vsync_ts_ = timestamp;
             }
-            if (!vsync_event_en_ && !vsync_flattening_en_ &&
-                !vsync_tracking_en_) {
+            if (!vsync_event_en_ && !vsync_tracking_en_) {
               vsync_worker_->VSyncControl(false);
             }
           },
@@ -192,6 +172,13 @@ HWC2::Error HwcDisplay::Init() {
       ALOGE("Failed to set backend for d=%d %d\n", int(handle_), ret);
       return HWC2::Error::BadDisplay;
     }
+    auto flatcbk = (struct FlatConCallbacks){.trigger = [this]() {
+      if (hwc2_->refresh_callback_.first != nullptr &&
+          hwc2_->refresh_callback_.second != nullptr)
+        hwc2_->refresh_callback_.first(hwc2_->refresh_callback_.second,
+                                       handle_);
+    }};
+    flatcon_ = FlatteningController::CreateInstance(flatcbk);
   }
 
   ToHwcLayer(*client_output).SetLayerBlendMode(HWC2_BLEND_MODE_PREMULTIPLIED);
@@ -969,37 +956,4 @@ void HwcDisplay::set_backend(std::unique_ptr<Backend> backend) {
   backend_ = std::move(backend);
 }
 
-/* returns true if composition should be sent to client */
-bool HwcDisplay::ProcessClientFlatteningState(bool skip) {
-  const int flattenning_state = flattenning_state_;
-  if (flattenning_state == ClientFlattenningState::Disabled) {
-    return false;
-  }
-
-  if (skip) {
-    flattenning_state_ = ClientFlattenningState::NotRequired;
-    return false;
-  }
-
-  if (flattenning_state == ClientFlattenningState::ClientRefreshRequested) {
-    flattenning_state_ = ClientFlattenningState::Flattened;
-    return true;
-  }
-
-  vsync_flattening_en_ = true;
-  vsync_worker_->VSyncControl(true);
-  flattenning_state_ = ClientFlattenningState::VsyncCountdownMax;
-  return false;
-}
-
-void HwcDisplay::ProcessFlatenningVsyncInternal() {
-  if (flattenning_state_ > ClientFlattenningState::ClientRefreshRequested &&
-      --flattenning_state_ == ClientFlattenningState::ClientRefreshRequested &&
-      hwc2_->refresh_callback_.first != nullptr &&
-      hwc2_->refresh_callback_.second != nullptr) {
-    hwc2_->refresh_callback_.first(hwc2_->refresh_callback_.second, handle_);
-    vsync_flattening_en_ = false;
-  }
-}
-
 }  // namespace android
diff --git a/hwc2_device/HwcDisplay.h b/hwc2_device/HwcDisplay.h
index 27dbda75524c32..ba5bfc68124707 100644
--- a/hwc2_device/HwcDisplay.h
+++ b/hwc2_device/HwcDisplay.h
@@ -24,6 +24,7 @@
 
 #include "HwcDisplayConfigs.h"
 #include "compositor/FEComposition.h"
+#include "compositor/FlatteningController.h"
 #include "drm/DrmAtomicStateManager.h"
 #include "drm/ResourceManager.h"
 #include "drm/VSyncWorker.h"
@@ -163,10 +164,6 @@ class HwcDisplay : public FEComposition {
     return total_stats_;
   }
 
-  /* returns true if composition should be sent to client */
-  bool ProcessClientFlatteningState(bool skip);
-  void ProcessFlatenningVsyncInternal();
-
   /* Headless mode required to keep SurfaceFlinger alive when all display are
    * disconnected, Without headless mode Android will continuously crash.
    * Only single internal (primary) display is required to be in HEADLESS mode
@@ -179,17 +176,11 @@ class HwcDisplay : public FEComposition {
 
   void Deinit();
 
- private:
-  enum ClientFlattenningState : int32_t {
-    Disabled = -3,
-    NotRequired = -2,
-    Flattened = -1,
-    ClientRefreshRequested = 0,
-    VsyncCountdownMax = 60, /* 1 sec @ 60FPS */
-  };
-
-  std::atomic_int flattenning_state_{ClientFlattenningState::NotRequired};
+  auto GetFlatCon() {
+    return flatcon_;
+  }
 
+ private:
   constexpr static size_t MATRIX_SIZE = 16;
 
   HwcDisplayConfigs configs_;
@@ -205,10 +196,10 @@ class HwcDisplay : public FEComposition {
   DrmDisplayPipeline *pipeline_{};
 
   std::unique_ptr<Backend> backend_;
+  std::shared_ptr<FlatteningController> flatcon_;
 
   std::shared_ptr<VSyncWorker> vsync_worker_;
   bool vsync_event_en_{};
-  bool vsync_flattening_en_{};
   bool vsync_tracking_en_{};
   int64_t last_vsync_ts_{};
 
diff --git a/meson.build b/meson.build
index 0f4e336c2518c7..63d63984be8b5b 100644
--- a/meson.build
+++ b/meson.build
@@ -11,6 +11,7 @@ inc_include = [include_directories('.')]
 
 src_common = files(
     'compositor/DrmKmsPlan.cpp',
+    'compositor/FlatteningController.cpp',
     'backend/BackendManager.cpp',
     'backend/Backend.cpp',
     'backend/BackendClient.cpp',
-- 
2.37.2

