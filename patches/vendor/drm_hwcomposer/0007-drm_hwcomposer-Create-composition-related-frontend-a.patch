From 2e94254c50ffebaad3c5f8a3e0f2d53cf40e481c Mon Sep 17 00:00:00 2001
From: Roman Stratiienko <r.stratiienko@gmail.com>
Date: Mon, 26 Dec 2022 14:01:20 +0200
Subject: [PATCH 07/15] drm_hwcomposer: Create composition-related frontend
 abstractions

This is a part of frontend isolation activities.
Please see next commits for more information.

This commit disables cppcoreguidelines-pro-type-static-cast-downcast,
since we don't want to use rtti and therefore can't do dynamic_cast.

Change-Id: I733d511339266751f99366da737cdf26343d884e
Signed-off-by: Roman Stratiienko <r.stratiienko@gmail.com>
---
 backend/Backend.cpp        |  6 +--
 backend/BackendClient.cpp  |  4 +-
 compositor/FEComposition.h | 33 ++++++++++++++
 hwc2_device/HwcDisplay.cpp | 93 ++++++++++++++++++++------------------
 hwc2_device/HwcDisplay.h   | 16 ++-----
 hwc2_device/HwcLayer.cpp   | 41 ++++++++---------
 hwc2_device/HwcLayer.h     | 20 +++-----
 7 files changed, 120 insertions(+), 93 deletions(-)
 create mode 100644 compositor/FEComposition.h

diff --git a/backend/Backend.cpp b/backend/Backend.cpp
index 679f083443141a..0c080929b7adda 100644
--- a/backend/Backend.cpp
+++ b/backend/Backend.cpp
@@ -85,7 +85,7 @@ bool Backend::IsClientLayer(HwcDisplay *display, HwcLayer *layer) {
   return !HardwareSupportsLayerType(layer->GetSfType()) ||
          !layer->IsLayerUsableAsDevice() ||
          display->color_transform_hint() != HAL_COLOR_TRANSFORM_IDENTITY ||
-         (layer->GetLayerData().pi.RequireScalingOrPhasing() &&
+         (layer->layer_data.pi.RequireScalingOrPhasing() &&
           display->GetHwc2()->GetResMan().ForcedScalingWithGpu());
 }
 
@@ -99,7 +99,7 @@ uint32_t Backend::CalcPixOps(const std::vector<HwcLayer *> &layers,
   uint32_t pixops = 0;
   for (size_t z_order = 0; z_order < layers.size(); ++z_order) {
     if (z_order >= first_z && z_order < first_z + size) {
-      auto &df = layers[z_order]->GetLayerData().pi.display_frame;
+      auto &df = layers[z_order]->layer_data.pi.display_frame;
       pixops += (df.right - df.left) * (df.bottom - df.top);
     }
   }
@@ -126,7 +126,7 @@ std::tuple<int, int> Backend::GetExtraClientRange(
    * If more layers then planes, save one plane
    * for client composited layers
    */
-  if (avail_planes < display->layers().size())
+  if (avail_planes < display->fe_layers.size())
     avail_planes--;
 
   const int extra_client = int(layers.size() - client_size) - int(avail_planes);
diff --git a/backend/BackendClient.cpp b/backend/BackendClient.cpp
index 606dca2f1e7827..c67a896590f60d 100644
--- a/backend/BackendClient.cpp
+++ b/backend/BackendClient.cpp
@@ -23,8 +23,8 @@ namespace android {
 HWC2::Error BackendClient::ValidateDisplay(HwcDisplay *display,
                                            uint32_t *num_types,
                                            uint32_t * /*num_requests*/) {
-  for (auto &[layer_handle, layer] : display->layers()) {
-    layer.SetValidatedType(HWC2::Composition::Client);
+  for (auto &fl : display->fe_layers) {
+    ToHwcLayer(*fl.second).SetValidatedType(HWC2::Composition::Client);
     ++*num_types;
   }
   return HWC2::Error::HasChanges;
diff --git a/compositor/FEComposition.h b/compositor/FEComposition.h
new file mode 100644
index 00000000000000..bf9633a9730341
--- /dev/null
+++ b/compositor/FEComposition.h
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2022 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#pragma once
+
+#include "LayerData.h"
+
+namespace android {
+
+struct FELayer {
+  uint32_t zpos;
+  LayerData layer_data;
+};
+
+struct FEComposition {
+  std::map<uint64_t /*key*/, std::shared_ptr<FELayer>> fe_layers;
+  std::shared_ptr<FELayer> client_output;
+};
+
+}  // namespace android
diff --git a/hwc2_device/HwcDisplay.cpp b/hwc2_device/HwcDisplay.cpp
index 194889e2310973..0e4d179e1c1b8b 100644
--- a/hwc2_device/HwcDisplay.cpp
+++ b/hwc2_device/HwcDisplay.cpp
@@ -90,7 +90,6 @@ HwcDisplay::HwcDisplay(hwc2_display_t handle, HWC2::DisplayType type,
     : hwc2_(hwc2),
       handle_(handle),
       type_(type),
-      client_layer_(this),
       color_transform_hint_(HAL_COLOR_TRANSFORM_IDENTITY) {
   // clang-format off
   color_transform_matrix_ = {1.0, 0.0, 0.0, 0.0,
@@ -98,6 +97,8 @@ HwcDisplay::HwcDisplay(hwc2_display_t handle, HWC2::DisplayType type,
                              0.0, 0.0, 1.0, 0.0,
                              0.0, 0.0, 0.0, 1.0};
   // clang-format on
+
+  client_output = std::shared_ptr<FELayer>(new HwcLayer(this));
 }
 
 HwcDisplay::~HwcDisplay() = default;
@@ -193,7 +194,7 @@ HWC2::Error HwcDisplay::Init() {
     }
   }
 
-  client_layer_.SetLayerBlendMode(HWC2_BLEND_MODE_PREMULTIPLIED);
+  ToHwcLayer(*client_output).SetLayerBlendMode(HWC2_BLEND_MODE_PREMULTIPLIED);
 
   return HWC2::Error::None;
 }
@@ -213,13 +214,13 @@ HWC2::Error HwcDisplay::ChosePreferredConfig() {
 }
 
 HWC2::Error HwcDisplay::AcceptDisplayChanges() {
-  for (std::pair<const hwc2_layer_t, HwcLayer> &l : layers_)
-    l.second.AcceptTypeChange();
+  for (auto &fl : fe_layers)
+    ToHwcLayer(*fl.second).AcceptTypeChange();
   return HWC2::Error::None;
 }
 
 HWC2::Error HwcDisplay::CreateLayer(hwc2_layer_t *layer) {
-  layers_.emplace(static_cast<hwc2_layer_t>(layer_idx_), HwcLayer(this));
+  fe_layers.emplace(layer_idx_, std::make_shared<HwcLayer>(this));
   *layer = static_cast<hwc2_layer_t>(layer_idx_);
   ++layer_idx_;
   return HWC2::Error::None;
@@ -230,7 +231,7 @@ HWC2::Error HwcDisplay::DestroyLayer(hwc2_layer_t layer) {
     return HWC2::Error::BadLayer;
   }
 
-  layers_.erase(layer);
+  fe_layers.erase(layer);
   return HWC2::Error::None;
 }
 
@@ -251,12 +252,13 @@ HWC2::Error HwcDisplay::GetChangedCompositionTypes(uint32_t *num_elements,
   }
 
   uint32_t num_changes = 0;
-  for (auto &l : layers_) {
-    if (l.second.IsTypeChanged()) {
+  for (auto &fl : fe_layers) {
+    auto &l = ToHwcLayer(*fl.second);
+    if (l.IsTypeChanged()) {
       if (layers && num_changes < *num_elements)
-        layers[num_changes] = l.first;
+        layers[num_changes] = fl.first;
       if (types && num_changes < *num_elements)
-        types[num_changes] = static_cast<int32_t>(l.second.GetValidatedType());
+        types[num_changes] = static_cast<int32_t>(l.GetValidatedType());
       ++num_changes;
     }
   }
@@ -436,8 +438,9 @@ HWC2::Error HwcDisplay::GetReleaseFences(uint32_t *num_elements,
 
   uint32_t num_layers = 0;
 
-  for (auto &l : layers_) {
-    if (!l.second.GetPriorBufferScanOutFlag() || !present_fence_) {
+  for (auto &fl : fe_layers) {
+    if (!ToHwcLayer(*fl.second).GetPriorBufferScanOutFlag() ||
+        !present_fence_) {
       continue;
     }
 
@@ -451,7 +454,7 @@ HWC2::Error HwcDisplay::GetReleaseFences(uint32_t *num_elements,
       return HWC2::Error::None;
     }
 
-    layers[num_layers - 1] = l.first;
+    layers[num_layers - 1] = fl.first;
     fences[num_layers - 1] = UniqueFd::Dup(present_fence_.Get()).Release();
   }
   *num_elements = num_layers;
@@ -471,11 +474,12 @@ HWC2::Error HwcDisplay::CreateComposition(AtomicCommitArgs &a_args) {
   auto mode_update_commited_ = false;
   if (staged_mode_ &&
       staged_mode_change_time_ <= ResourceManager::GetTimeMonotonicNs()) {
-    client_layer_.SetLayerDisplayFrame(
-        (hwc_rect_t){.left = 0,
-                     .top = 0,
-                     .right = int(staged_mode_->GetRawMode().hdisplay),
-                     .bottom = int(staged_mode_->GetRawMode().vdisplay)});
+    ToHwcLayer(*client_output)
+        .SetLayerDisplayFrame(
+            (hwc_rect_t){.left = 0,
+                         .top = 0,
+                         .right = int(staged_mode_->GetRawMode().hdisplay),
+                         .bottom = int(staged_mode_->GetRawMode().vdisplay)});
 
     configs_.active_config_id = staged_mode_config_id_;
 
@@ -488,23 +492,24 @@ HWC2::Error HwcDisplay::CreateComposition(AtomicCommitArgs &a_args) {
   // order the layers by z-order
   bool use_client_layer = false;
   uint32_t client_z_order = UINT32_MAX;
-  std::map<uint32_t, HwcLayer *> z_map;
-  for (std::pair<const hwc2_layer_t, HwcLayer> &l : layers_) {
-    switch (l.second.GetValidatedType()) {
+  std::map<uint32_t, std::shared_ptr<FELayer>> z_map;
+  for (auto &fl : fe_layers) {
+    auto &l = ToHwcLayer(*fl.second);
+    switch (l.GetValidatedType()) {
       case HWC2::Composition::Device:
-        z_map.emplace(l.second.GetZOrder(), &l.second);
+        z_map.emplace(l.zpos, fl.second);
         break;
       case HWC2::Composition::Client:
         // Place it at the z_order of the lowest client layer
         use_client_layer = true;
-        client_z_order = std::min(client_z_order, l.second.GetZOrder());
+        client_z_order = std::min(client_z_order, l.zpos);
         break;
       default:
         continue;
     }
   }
   if (use_client_layer)
-    z_map.emplace(client_z_order, &client_layer_);
+    z_map.emplace(client_z_order, client_output);
 
   if (z_map.empty())
     return HWC2::Error::BadLayer;
@@ -512,13 +517,14 @@ HWC2::Error HwcDisplay::CreateComposition(AtomicCommitArgs &a_args) {
   std::vector<LayerData> composition_layers;
 
   /* Import & populate */
-  for (std::pair<const uint32_t, HwcLayer *> &l : z_map) {
-    l.second->PopulateLayerData(a_args.test_only);
+  for (auto &zm : z_map) {
+    ToHwcLayer(*zm.second).PopulateLayerData(a_args.test_only);
   }
 
   // now that they're ordered by z, add them to the composition
-  for (std::pair<const uint32_t, HwcLayer *> &l : z_map) {
-    if (!l.second->IsLayerUsableAsDevice()) {
+  for (auto &zm : z_map) {
+    auto &l = ToHwcLayer(*zm.second);
+    if (!l.IsLayerUsableAsDevice()) {
       /* This will be normally triggered on validation of the first frame
        * containing CLIENT layer. At this moment client buffer is not yet
        * provided by the CLIENT.
@@ -528,7 +534,7 @@ HWC2::Error HwcDisplay::CreateComposition(AtomicCommitArgs &a_args) {
        */
       return HWC2::Error::BadLayer;
     }
-    composition_layers.emplace_back(l.second->GetLayerData().Clone());
+    composition_layers.emplace_back(l.layer_data.Clone());
   }
 
   /* Store plan to ensure shared planes won't be stolen by other display
@@ -624,8 +630,8 @@ HWC2::Error HwcDisplay::SetClientTarget(buffer_handle_t target,
                                         int32_t acquire_fence,
                                         int32_t dataspace,
                                         hwc_region_t /*damage*/) {
-  client_layer_.SetLayerBuffer(target, acquire_fence);
-  client_layer_.SetLayerDataspace(dataspace);
+  ToHwcLayer(*client_output).SetLayerBuffer(target, acquire_fence);
+  ToHwcLayer(*client_output).SetLayerDataspace(dataspace);
 
   /*
    * target can be nullptr, this does mean the Composer Service is calling
@@ -633,7 +639,7 @@ HWC2::Error HwcDisplay::SetClientTarget(buffer_handle_t target,
    * https://cs.android.com/android/platform/superproject/+/master:hardware/interfaces/graphics/composer/2.1/utils/hal/include/composer-hal/2.1/ComposerClient.h;l=350;drc=944b68180b008456ed2eb4d4d329e33b19bd5166
    */
   if (target == nullptr) {
-    client_layer_.SwChainClearCache();
+    ToHwcLayer(*client_output).SwChainClearCache();
     return HWC2::Error::None;
   }
 
@@ -641,13 +647,13 @@ HWC2::Error HwcDisplay::SetClientTarget(buffer_handle_t target,
     return HWC2::Error::None;
   }
 
-  client_layer_.PopulateLayerData(/*test = */ true);
-  if (!client_layer_.IsLayerUsableAsDevice()) {
+  ToHwcLayer(*client_output).PopulateLayerData(/*test = */ true);
+  if (!ToHwcLayer(*client_output).IsLayerUsableAsDevice()) {
     ALOGE("Client layer must be always usable by DRM/KMS");
     return HWC2::Error::BadLayer;
   }
 
-  auto &bi = client_layer_.GetLayerData().bi;
+  auto &bi = ToHwcLayer(*client_output).layer_data.bi;
   if (!bi) {
     ALOGE("%s: Invalid state", __func__);
     return HWC2::Error::BadLayer;
@@ -657,7 +663,7 @@ HWC2::Error HwcDisplay::SetClientTarget(buffer_handle_t target,
                                    .top = 0.0F,
                                    .right = static_cast<float>(bi->width),
                                    .bottom = static_cast<float>(bi->height)};
-  client_layer_.SetLayerSourceCrop(source_crop);
+  ToHwcLayer(*client_output).SetLayerSourceCrop(source_crop);
 
   return HWC2::Error::None;
 }
@@ -757,9 +763,10 @@ HWC2::Error HwcDisplay::ValidateDisplay(uint32_t *num_types,
    * a CLIENT, it is used by display controller (Front buffer). We have to store
    * this state to provide the CLIENT with the release fences for such buffers.
    */
-  for (auto &l : layers_) {
-    l.second.SetPriorBufferScanOutFlag(l.second.GetValidatedType() !=
-                                       HWC2::Composition::Client);
+  for (auto &fl : fe_layers) {
+    auto &l = ToHwcLayer(*fl.second);
+    l.SetPriorBufferScanOutFlag(l.GetValidatedType() !=
+                                HWC2::Composition::Client);
   }
 
   return backend_->ValidateDisplay(this, num_types, num_requests);
@@ -767,15 +774,15 @@ HWC2::Error HwcDisplay::ValidateDisplay(uint32_t *num_types,
 
 std::vector<HwcLayer *> HwcDisplay::GetOrderLayersByZPos() {
   std::vector<HwcLayer *> ordered_layers;
-  ordered_layers.reserve(layers_.size());
+  ordered_layers.reserve(fe_layers.size());
 
-  for (auto &[handle, layer] : layers_) {
-    ordered_layers.emplace_back(&layer);
+  for (auto &fl : fe_layers) {
+    ordered_layers.emplace_back(&ToHwcLayer(*fl.second));
   }
 
   std::sort(std::begin(ordered_layers), std::end(ordered_layers),
             [](const HwcLayer *lhs, const HwcLayer *rhs) {
-              return lhs->GetZOrder() < rhs->GetZOrder();
+              return lhs->zpos < rhs->zpos;
             });
 
   return ordered_layers;
diff --git a/hwc2_device/HwcDisplay.h b/hwc2_device/HwcDisplay.h
index 90b876d0ea8f89..39bf127cecfc08 100644
--- a/hwc2_device/HwcDisplay.h
+++ b/hwc2_device/HwcDisplay.h
@@ -23,7 +23,7 @@
 #include <sstream>
 
 #include "HwcDisplayConfigs.h"
-#include "compositor/LayerData.h"
+#include "compositor/FEComposition.h"
 #include "drm/DrmAtomicStateManager.h"
 #include "drm/ResourceManager.h"
 #include "drm/VSyncWorker.h"
@@ -37,7 +37,7 @@ class DrmHwcTwo;
 inline constexpr uint32_t kPrimaryDisplay = 0;
 
 // NOLINTNEXTLINE
-class HwcDisplay {
+class HwcDisplay : public FEComposition {
  public:
   HwcDisplay(hwc2_display_t handle, HWC2::DisplayType type, DrmHwcTwo *hwc2);
   HwcDisplay(const HwcDisplay &) = delete;
@@ -120,10 +120,10 @@ class HwcDisplay {
   HWC2::Error SetVsyncEnabled(int32_t enabled);
   HWC2::Error ValidateDisplay(uint32_t *num_types, uint32_t *num_requests);
   HwcLayer *get_layer(hwc2_layer_t layer) {
-    auto it = layers_.find(layer);
-    if (it == layers_.end())
+    if (fe_layers.count(layer) == 0)
       return nullptr;
-    return &it->second;
+
+    return static_cast<HwcLayer *>(fe_layers[layer].get());
   }
 
   /* Statistics */
@@ -152,10 +152,6 @@ class HwcDisplay {
     return hwc2_;
   }
 
-  std::map<hwc2_layer_t, HwcLayer> &layers() {
-    return layers_;
-  }
-
   auto &GetPipe() {
     return *pipeline_;
   }
@@ -222,8 +218,6 @@ class HwcDisplay {
 
   uint32_t layer_idx_{};
 
-  std::map<hwc2_layer_t, HwcLayer> layers_;
-  HwcLayer client_layer_;
   int32_t color_mode_{};
   std::array<float, MATRIX_SIZE> color_transform_matrix_{};
   android_color_transform_t color_transform_hint_;
diff --git a/hwc2_device/HwcLayer.cpp b/hwc2_device/HwcLayer.cpp
index 055ec7236ce07f..616bea98d7ee7a 100644
--- a/hwc2_device/HwcLayer.cpp
+++ b/hwc2_device/HwcLayer.cpp
@@ -104,7 +104,7 @@ HWC2::Error HwcLayer::SetLayerDataspace(int32_t dataspace) {
 }
 
 HWC2::Error HwcLayer::SetLayerDisplayFrame(hwc_rect_t frame) {
-  layer_data_.pi.display_frame = (IRect){
+  layer_data.pi.display_frame = (IRect){
       .top = frame.top,
       .bottom = frame.bottom,
       .left = frame.left,
@@ -114,7 +114,7 @@ HWC2::Error HwcLayer::SetLayerDisplayFrame(hwc_rect_t frame) {
 }
 
 HWC2::Error HwcLayer::SetLayerPlaneAlpha(float alpha) {
-  layer_data_.pi.alpha = std::lround(alpha * UINT16_MAX);
+  layer_data.pi.alpha = std::lround(alpha * UINT16_MAX);
   return HWC2::Error::None;
 }
 
@@ -126,7 +126,7 @@ HWC2::Error HwcLayer::SetLayerSidebandStream(
 }
 
 HWC2::Error HwcLayer::SetLayerSourceCrop(hwc_frect_t crop) {
-  layer_data_.pi.source_crop = (FRect){
+  layer_data.pi.source_crop = (FRect){
       .top = crop.top,
       .bottom = crop.bottom,
       .left = crop.left,
@@ -161,7 +161,7 @@ HWC2::Error HwcLayer::SetLayerTransform(int32_t transform) {
       l_transform |= LayerTransform::kRotate90;
   }
 
-  layer_data_.pi.transform = static_cast<LayerTransform>(l_transform);
+  layer_data.pi.transform = static_cast<LayerTransform>(l_transform);
   return HWC2::Error::None;
 }
 
@@ -172,7 +172,7 @@ HWC2::Error HwcLayer::SetLayerVisibleRegion(hwc_region_t /*visible*/) {
 }
 
 HWC2::Error HwcLayer::SetLayerZOrder(uint32_t order) {
-  z_order_ = order;
+  zpos = order;
   return HWC2::Error::None;
 }
 
@@ -182,25 +182,24 @@ void HwcLayer::ImportFb() {
   }
   buffer_handle_updated_ = false;
 
-  layer_data_.fb = {};
+  layer_data.fb = {};
 
   auto unique_id = BufferInfoGetter::GetInstance()->GetUniqueId(buffer_handle_);
   if (unique_id && SwChainGetBufferFromCache(*unique_id)) {
     return;
   }
 
-  layer_data_.bi = BufferInfoGetter::GetInstance()->GetBoInfo(buffer_handle_);
-  if (!layer_data_.bi) {
+  layer_data.bi = BufferInfoGetter::GetInstance()->GetBoInfo(buffer_handle_);
+  if (!layer_data.bi) {
     ALOGW("Unable to get buffer information (0x%p)", buffer_handle_);
     bi_get_failed_ = true;
     return;
   }
 
-  layer_data_
-      .fb = parent_->GetPipe().device->GetDrmFbImporter().GetOrCreateFbId(
-      &layer_data_.bi.value());
+  layer_data.fb = parent_->GetPipe().device->GetDrmFbImporter().GetOrCreateFbId(
+      &layer_data.bi.value());
 
-  if (!layer_data_.fb) {
+  if (!layer_data.fb) {
     ALOGV("Unable to create framebuffer object for buffer 0x%p",
           buffer_handle_);
     fb_import_failed_ = true;
@@ -215,23 +214,23 @@ void HwcLayer::ImportFb() {
 void HwcLayer::PopulateLayerData(bool test) {
   ImportFb();
 
-  if (!layer_data_.bi) {
+  if (!layer_data.bi) {
     ALOGE("%s: Invalid state", __func__);
     return;
   }
 
   if (blend_mode_ != BufferBlendMode::kUndefined) {
-    layer_data_.bi->blend_mode = blend_mode_;
+    layer_data.bi->blend_mode = blend_mode_;
   }
   if (color_space_ != BufferColorSpace::kUndefined) {
-    layer_data_.bi->color_space = color_space_;
+    layer_data.bi->color_space = color_space_;
   }
   if (sample_range_ != BufferSampleRange::kUndefined) {
-    layer_data_.bi->sample_range = sample_range_;
+    layer_data.bi->sample_range = sample_range_;
   }
 
   if (!test) {
-    layer_data_.acquire_fence = std::move(acquire_fence_);
+    layer_data.acquire_fence = std::move(acquire_fence_);
   }
 }
 
@@ -253,8 +252,8 @@ bool HwcLayer::SwChainGetBufferFromCache(BufferUniqueId unique_id) {
     return false;
   }
 
-  layer_data_.bi = el.bi;
-  layer_data_.fb = el.fb;
+  layer_data.bi = el.bi;
+  layer_data.fb = el.fb;
 
   return true;
 }
@@ -295,8 +294,8 @@ void HwcLayer::SwChainAddCurrentBuffer(BufferUniqueId unique_id) {
       swchain_cache_[seq] = {};
     }
 
-    swchain_cache_[seq].bi = layer_data_.bi;
-    swchain_cache_[seq].fb = layer_data_.fb;
+    swchain_cache_[seq].bi = layer_data.bi;
+    swchain_cache_[seq].fb = layer_data.fb;
   }
 }
 
diff --git a/hwc2_device/HwcLayer.h b/hwc2_device/HwcLayer.h
index 627d5ac0800ce6..009b0273af59b1 100644
--- a/hwc2_device/HwcLayer.h
+++ b/hwc2_device/HwcLayer.h
@@ -19,13 +19,13 @@
 #include <hardware/hwcomposer2.h>
 
 #include "bufferinfo/BufferInfoGetter.h"
-#include "compositor/LayerData.h"
+#include "compositor/FEComposition.h"
 
 namespace android {
 
 class HwcDisplay;
 
-class HwcLayer {
+class HwcLayer : public FELayer {
  public:
   explicit HwcLayer(HwcDisplay *parent_display) : parent_(parent_display){};
 
@@ -53,14 +53,6 @@ class HwcLayer {
     prior_buffer_scanout_flag_ = state;
   }
 
-  uint32_t GetZOrder() const {
-    return z_order_;
-  }
-
-  auto &GetLayerData() {
-    return layer_data_;
-  }
-
   // Layer hooks
   HWC2::Error SetCursorPosition(int32_t /*x*/, int32_t /*y*/);
   HWC2::Error SetLayerBlendMode(int32_t mode);
@@ -83,9 +75,6 @@ class HwcLayer {
   HWC2::Composition sf_type_ = HWC2::Composition::Invalid;
   HWC2::Composition validated_type_ = HWC2::Composition::Invalid;
 
-  uint32_t z_order_ = 0;
-  LayerData layer_data_;
-
   /* Should be populated to layer_data_.acquire_fence only before presenting */
   UniqueFd acquire_fence_;
 
@@ -138,4 +127,9 @@ class HwcLayer {
   bool swchain_reassembled_{};
 };
 
+inline auto &ToHwcLayer(FELayer &in) {
+  // NOLINTNEXTLINE(cppcoreguidelines-pro-type-static-cast-downcast):
+  return static_cast<HwcLayer &>(in);
+}
+
 }  // namespace android
-- 
2.37.2

