From c0b8fc0342a19001f98cc91d08ea286dea129f88 Mon Sep 17 00:00:00 2001
From: Roman Stratiienko <r.stratiienko@gmail.com>
Date: Mon, 2 Jan 2023 14:27:10 +0200
Subject: [PATCH 14/15] drm_hwcomposer: Increase chance for CLIENT buffer reuse

Closes: https://gitlab.freedesktop.org/drm-hwcomposer/drm-hwcomposer/-/issues/52
Change-Id: I5e53bc7b3a7f00702528cd5f93efbf72e5cf20f3
Signed-off-by: Roman Stratiienko <r.stratiienko@gmail.com>
---
 compositor/CompositorClassic.cpp | 17 ++++--
 compositor/CompositorClassic.h   |  4 +-
 compositor/FEComposition.h       |  5 +-
 hwc2_device/HwcDisplay.cpp       | 19 ++++++-
 hwc2_device/HwcDisplay.h         |  2 +
 hwc2_device/HwcLayer.cpp         | 95 ++++++++++++++++++++++++--------
 hwc2_device/HwcLayer.h           |  3 +
 7 files changed, 113 insertions(+), 32 deletions(-)

diff --git a/compositor/CompositorClassic.cpp b/compositor/CompositorClassic.cpp
index 2a79a445c47d2e..51e05ad140b027 100644
--- a/compositor/CompositorClassic.cpp
+++ b/compositor/CompositorClassic.cpp
@@ -88,8 +88,8 @@ void CompositorGeneric::SelectClientLayers(FEComposition &comp) {
     MarkClient(layers, 0, client_size);
   }
 
-  stat_.gpu_pixops += CalcPixOps(layers, client_start, client_size);
-  stat_.total_pixops += CalcPixOps(layers, 0, layers.size());
+  stat_.gpu_pixops += CalcPixOps(layers, client_start, client_size, false);
+  stat_.total_pixops += CalcPixOps(layers, 0, layers.size(), false);
 }
 
 auto CompositorGeneric::PresentComposition(FEComposition &comp,
@@ -167,16 +167,25 @@ auto CompositorGeneric::PresentComposition(FEComposition &comp,
 }
 
 auto CompositorGeneric::CalcPixOps(OrderedLayers &layers, size_t first_z,
-                                   size_t size) -> uint32_t {
+                                   size_t size, bool zero_cost_en) -> uint32_t {
   uint32_t pixops = 0;
   size_t i = 0;
+  bool zero_cost = true;
   for (auto &l : layers) {
     if (i >= first_z && i < first_z + size) {
       auto &df = l.second->layer_data.pi.display_frame;
       pixops += (df.right - df.left) * (df.bottom - df.top);
+      if (/*l.second->has_damage || */l.second->pi_changed)
+        zero_cost = false;
     }
     i++;
   }
+
+  if (zero_cost && zero_cost_en) {
+    ALOGI("Zero cost range found");
+    return 0;
+  }
+
   return pixops;
 }
 
@@ -225,7 +234,7 @@ void CompositorGeneric::ExtendClientRange(OrderedLayers &layers,
 
     uint32_t gpu_pixops = UINT32_MAX;
     for (size_t i = 0; i < steps; i++) {
-      const uint32_t po = CalcPixOps(layers, start + i, client_size);
+      const uint32_t po = CalcPixOps(layers, start + i, client_size, true);
       if (po < gpu_pixops) {
         gpu_pixops = po;
         client_start = start + int(i);
diff --git a/compositor/CompositorClassic.h b/compositor/CompositorClassic.h
index a135145d397afa..8b2711d8c88c1e 100644
--- a/compositor/CompositorClassic.h
+++ b/compositor/CompositorClassic.h
@@ -45,8 +45,8 @@ class CompositorGeneric : public CompositorBase {
   auto Dump() -> std::string override;
 
  protected:
-  static auto CalcPixOps(OrderedLayers &layers, size_t first_z, size_t size)
-      -> uint32_t;
+  static auto CalcPixOps(OrderedLayers &layers, size_t first_z, size_t size,
+                         bool zero_cost_en) -> uint32_t;
   static void MarkClient(OrderedLayers &layers, size_t client_first_z,
                          size_t client_size);
   void ExtendClientRange(OrderedLayers &layers, int &client_start,
diff --git a/compositor/FEComposition.h b/compositor/FEComposition.h
index 726d7fed02d8ec..dfb7a25de3e41b 100644
--- a/compositor/FEComposition.h
+++ b/compositor/FEComposition.h
@@ -21,8 +21,9 @@
 namespace android {
 
 struct FELayer {
-  bool use_client;
-  uint32_t zpos;
+  bool use_client = false;
+  bool pi_changed = true;
+  uint32_t zpos = 0;
   LayerData layer_data;
 };
 
diff --git a/hwc2_device/HwcDisplay.cpp b/hwc2_device/HwcDisplay.cpp
index a3f906ca51bc35..bc7c27c5c6b30c 100644
--- a/hwc2_device/HwcDisplay.cpp
+++ b/hwc2_device/HwcDisplay.cpp
@@ -450,11 +450,24 @@ HWC2::Error HwcDisplay::GetReleaseFences(uint32_t *num_elements,
 int HwcDisplay::TryPresentDisplayInt(int32_t *out_present_fence,
                                      bool validated) {
   if (!validated) {
+    int reuse_layer_count = 0;
     for (auto &fl : fe_layers) {
       auto &l = ToHwcLayer(*fl.second);
-      if (l.use_client || !l.CanScanout())
+      if (l.use_client && !l.pi_changed)
+        reuse_layer_count++;
+      if (l.use_client && l.pi_changed)
+        l.use_client = false;
+      if (!l.CanScanout())
         return -EINVAL;
     }
+
+    if (reuse_layer_count > 0 && reuse_layer_count != client_layers_count_) {
+      ALOGI("Reuse: %i, cli: %i", reuse_layer_count, client_layers_count_);
+      return -EINVAL;
+    }
+
+    if (reuse_layer_count > 0)
+      ALOGI("PresentDisplay(): Reusing previous client layer");
   }
 
   AtomicCommitArgs a_args{
@@ -699,12 +712,16 @@ HWC2::Error HwcDisplay::ValidateDisplay(uint32_t *num_types,
 
   compositor_->SelectClientLayers(*this);
 
+  client_layers_count_ = 0;
   for (auto &fl : fe_layers) {
     auto &l = ToHwcLayer(*fl.second);
     l.UpdateValidatedType();
     if (l.IsTypeChanged()) {
       (*num_types)++;
     }
+    if (l.GetValidatedType() == HWC2::Composition::Client)
+      client_layers_count_++;
+    l.pi_changed = false;
   }
 
   frame_validated_ = true;
diff --git a/hwc2_device/HwcDisplay.h b/hwc2_device/HwcDisplay.h
index 74bafa772a76f6..c80516bbe80f26 100644
--- a/hwc2_device/HwcDisplay.h
+++ b/hwc2_device/HwcDisplay.h
@@ -175,6 +175,8 @@ class HwcDisplay : public FEComposition {
   bool vsync_tracking_en_{};
   int64_t last_vsync_ts_{};
 
+  int client_layers_count_{};
+
   bool frame_validated_{};
 
   const hwc2_display_t handle_;
diff --git a/hwc2_device/HwcLayer.cpp b/hwc2_device/HwcLayer.cpp
index 167ad3885232e3..81c8b441cc856e 100644
--- a/hwc2_device/HwcLayer.cpp
+++ b/hwc2_device/HwcLayer.cpp
@@ -52,21 +52,26 @@ HWC2::Error HwcLayer::SetCursorPosition(int32_t /*x*/, int32_t /*y*/) {
 }
 
 HWC2::Error HwcLayer::SetLayerBlendMode(int32_t mode) {
+  auto bm = BufferBlendMode::kUndefined;
   switch (static_cast<HWC2::BlendMode>(mode)) {
     case HWC2::BlendMode::None:
-      blend_mode_ = BufferBlendMode::kNone;
+      bm = BufferBlendMode::kNone;
       break;
     case HWC2::BlendMode::Premultiplied:
-      blend_mode_ = BufferBlendMode::kPreMult;
+      bm = BufferBlendMode::kPreMult;
       break;
     case HWC2::BlendMode::Coverage:
-      blend_mode_ = BufferBlendMode::kCoverage;
+      bm = BufferBlendMode::kCoverage;
       break;
     default:
-      ALOGE("Unknown blending mode b=%d", blend_mode_);
-      blend_mode_ = BufferBlendMode::kUndefined;
+      ALOGE("Unknown blending mode b=%d", mode);
       break;
   }
+  if (blend_mode_ != bm) {
+    blend_mode_ = bm;
+    pi_changed = true;
+  }
+
   return HWC2::Error::None;
 }
 
@@ -78,65 +83,90 @@ HWC2::Error HwcLayer::SetLayerBuffer(buffer_handle_t buffer,
   acquire_fence_ = UniqueFd(acquire_fence);
   buffer_handle_ = buffer;
   buffer_handle_updated_ = true;
+  pi_changed = true;
 
   return HWC2::Error::None;
 }
 
 // NOLINTNEXTLINE(readability-convert-member-functions-to-static)
-HWC2::Error HwcLayer::SetLayerColor(hwc_color_t /*color*/) {
-  // TODO(nobody): Put to client composition here?
+HWC2::Error HwcLayer::SetLayerColor(hwc_color_t color) {
+  if (memcmp(&color_, &color, sizeof(color)) != 0) {
+    color_ = color;
+    pi_changed = true;
+  }
   return HWC2::Error::None;
 }
 
 HWC2::Error HwcLayer::SetLayerCompositionType(int32_t type) {
-  sf_type_ = static_cast<HWC2::Composition>(type);
+  auto val = static_cast<HWC2::Composition>(type);
+  if (val != sf_type_) {
+    sf_type_ = val;
+//    pi_changed = true;
+  }
   return HWC2::Error::None;
 }
 
 HWC2::Error HwcLayer::SetLayerDataspace(int32_t dataspace) {
+  auto cs = BufferColorSpace::kUndefined;
   switch (dataspace & HAL_DATASPACE_STANDARD_MASK) {
     case HAL_DATASPACE_STANDARD_BT709:
-      color_space_ = BufferColorSpace::kItuRec709;
+      cs = BufferColorSpace::kItuRec709;
       break;
     case HAL_DATASPACE_STANDARD_BT601_625:
     case HAL_DATASPACE_STANDARD_BT601_625_UNADJUSTED:
     case HAL_DATASPACE_STANDARD_BT601_525:
     case HAL_DATASPACE_STANDARD_BT601_525_UNADJUSTED:
-      color_space_ = BufferColorSpace::kItuRec601;
+      cs = BufferColorSpace::kItuRec601;
       break;
     case HAL_DATASPACE_STANDARD_BT2020:
     case HAL_DATASPACE_STANDARD_BT2020_CONSTANT_LUMINANCE:
-      color_space_ = BufferColorSpace::kItuRec2020;
+      cs = BufferColorSpace::kItuRec2020;
       break;
-    default:
-      color_space_ = BufferColorSpace::kUndefined;
   }
 
+  if (cs != color_space_) {
+    color_space_ = cs;
+    pi_changed = true;
+  }
+
+  auto sr = BufferSampleRange::kUndefined;
   switch (dataspace & HAL_DATASPACE_RANGE_MASK) {
     case HAL_DATASPACE_RANGE_FULL:
-      sample_range_ = BufferSampleRange::kFullRange;
+      sr = BufferSampleRange::kFullRange;
       break;
     case HAL_DATASPACE_RANGE_LIMITED:
-      sample_range_ = BufferSampleRange::kLimitedRange;
+      sr = BufferSampleRange::kLimitedRange;
       break;
-    default:
-      sample_range_ = BufferSampleRange::kUndefined;
   }
+
+  if (sr != sample_range_) {
+    sample_range_ = sr;
+    pi_changed = true;
+  }
+
   return HWC2::Error::None;
 }
 
 HWC2::Error HwcLayer::SetLayerDisplayFrame(hwc_rect_t frame) {
-  layer_data.pi.display_frame = (IRect){
+  IRect df = (IRect){
       .top = frame.top,
       .bottom = frame.bottom,
       .left = frame.left,
       .right = frame.right,
   };
+  if (memcmp(&layer_data.pi.display_frame, &df, sizeof(df)) != 0) {
+    layer_data.pi.display_frame = df;
+    pi_changed = true;
+  }
   return HWC2::Error::None;
 }
 
 HWC2::Error HwcLayer::SetLayerPlaneAlpha(float alpha) {
-  layer_data.pi.alpha = std::lround(alpha * UINT16_MAX);
+  auto a = std::lround(alpha * UINT16_MAX);
+  if (layer_data.pi.alpha != a) {
+    layer_data.pi.alpha = a;
+    pi_changed = true;
+  }
   return HWC2::Error::None;
 }
 
@@ -148,18 +178,28 @@ HWC2::Error HwcLayer::SetLayerSidebandStream(
 }
 
 HWC2::Error HwcLayer::SetLayerSourceCrop(hwc_frect_t crop) {
-  layer_data.pi.source_crop = (FRect){
+  FRect sc = (FRect){
       .top = crop.top,
       .bottom = crop.bottom,
       .left = crop.left,
       .right = crop.right,
   };
+  if (memcmp(&layer_data.pi.source_crop, &sc, sizeof(sc)) != 0) {
+    layer_data.pi.source_crop = sc;
+    pi_changed = true;
+  }
+
   return HWC2::Error::None;
 }
 
 // NOLINTNEXTLINE(readability-convert-member-functions-to-static)
-HWC2::Error HwcLayer::SetLayerSurfaceDamage(hwc_region_t /*damage*/) {
+HWC2::Error HwcLayer::SetLayerSurfaceDamage(hwc_region_t damage) {
   // TODO(nobody): We don't use surface damage, marking as unsupported
+  for (int i = 0; i < damage.numRects; i++) {
+    auto& r = damage.rects[i];
+    if (r.right != 0 && r.bottom != 0)
+      pi_changed = true;
+  }
   return HWC2::Error::None;
 }
 
@@ -183,7 +223,12 @@ HWC2::Error HwcLayer::SetLayerTransform(int32_t transform) {
       l_transform |= LayerTransform::kRotate90;
   }
 
-  layer_data.pi.transform = static_cast<LayerTransform>(l_transform);
+  auto lt = static_cast<LayerTransform>(l_transform);
+  if (layer_data.pi.transform != lt) {
+    layer_data.pi.transform = lt;
+    pi_changed = true;
+  }
+
   return HWC2::Error::None;
 }
 
@@ -194,7 +239,11 @@ HWC2::Error HwcLayer::SetLayerVisibleRegion(hwc_region_t /*visible*/) {
 }
 
 HWC2::Error HwcLayer::SetLayerZOrder(uint32_t order) {
-  zpos = order;
+  if (zpos != order) {
+    zpos = order;
+    pi_changed = true;
+  }
+
   return HWC2::Error::None;
 }
 
diff --git a/hwc2_device/HwcLayer.h b/hwc2_device/HwcLayer.h
index b86dcd4f3c9c1a..334c43379c0726 100644
--- a/hwc2_device/HwcLayer.h
+++ b/hwc2_device/HwcLayer.h
@@ -94,6 +94,9 @@ class HwcLayer : public FELayer {
   buffer_handle_t buffer_handle_{};
   bool buffer_handle_updated_{};
 
+  /* color is used to track SF changes only */
+  hwc_color_t color_;
+
   bool prior_buffer_scanout_flag_{};
 
   HwcDisplay *const parent_;
-- 
2.37.2

