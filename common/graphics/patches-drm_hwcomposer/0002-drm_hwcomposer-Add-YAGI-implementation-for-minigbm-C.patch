From 4f9791bbdfbf5a189ec57ba57cf1d29a3b4ed84b Mon Sep 17 00:00:00 2001
From: Roman Stratiienko <r.stratiienko@gmail.com>
Date: Sat, 10 Dec 2022 11:02:09 +0200
Subject: [PATCH 02/15] drm_hwcomposer: Add YAGI implementation for minigbm
 CROS API

This should eventually substitute bufferinfo/legacy/BufferInfoMinigbm.cpp.

Change-Id: Ifdbe48f9dfdc29a002a4a7c6c8e0cb542c550ed3
Signed-off-by: Roman Stratiienko <r.stratiienko@gmail.com>
---
 Makefile                       |   1 +
 bufferinfo/meson.build         |   2 +
 bufferinfo/yagi/Android.bp     |  23 ++++
 bufferinfo/yagi/meson.build    |   6 +
 bufferinfo/yagi/yagi_crosapi.c | 201 +++++++++++++++++++++++++++++++++
 5 files changed, 233 insertions(+)
 create mode 100644 bufferinfo/yagi/Android.bp
 create mode 100644 bufferinfo/yagi/meson.build
 create mode 100644 bufferinfo/yagi/yagi_crosapi.c

diff --git a/Makefile b/Makefile
index 98e33af839c24e..d00cccba6b508c 100644
--- a/Makefile
+++ b/Makefile
@@ -72,6 +72,7 @@ build_deploy: ## Build for Andoid and deploy onto the target device (require act
 	$(DOCKER_BIN) exec -it $(IMAGE_NAME) bash -c "make -C ~/aospless all"
 	$(DOCKER_BIN) exec -it $(IMAGE_NAME) bash -c "cp -r ~/aospless/install/* ~/drm_hwcomposer/.out/arm64"
 	adb push .out/arm64/vendor/lib64/hw/hwcomposer.drm.so /vendor/lib64/hw/hwcomposer.drm.so
+	adb push .out/arm64/vendor/lib64/libyagi_crosapi.so /vendor/lib64/libyagi_crosapi.so
 	adb shell stop
 	adb shell stop vendor.hwcomposer-2-1 && adb shell start vendor.hwcomposer-2-1 || true
 	adb shell stop vendor.hwcomposer-2-2 && adb shell start vendor.hwcomposer-2-2 || true
diff --git a/bufferinfo/meson.build b/bufferinfo/meson.build
index c9a674418a297e..5c4a50d03c4d45 100644
--- a/bufferinfo/meson.build
+++ b/bufferinfo/meson.build
@@ -4,3 +4,5 @@ src_common += files(
     'BufferInfoMapperMetadata.cpp',
     'BufferInfoYagi.cpp',
 )
+
+subdir('yagi')
diff --git a/bufferinfo/yagi/Android.bp b/bufferinfo/yagi/Android.bp
new file mode 100644
index 00000000000000..47702f59f576f9
--- /dev/null
+++ b/bufferinfo/yagi/Android.bp
@@ -0,0 +1,23 @@
+// Copyright (C) 2022 The Android Open Source Project
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+cc_library_shared {
+    name: "yagi_crosapi",
+    srcs: ["yagi_crosapi.c"],
+    shared_libs: [
+        "libhardware",
+        "liblog",
+    ],
+    vendor: true,
+}
diff --git a/bufferinfo/yagi/meson.build b/bufferinfo/yagi/meson.build
new file mode 100644
index 00000000000000..6cb589c3e34642
--- /dev/null
+++ b/bufferinfo/yagi/meson.build
@@ -0,0 +1,6 @@
+shared_library(
+    'yagi_crosapi',
+    'yagi_crosapi.c',
+    dependencies : deps,
+    install : true,
+)
diff --git a/bufferinfo/yagi/yagi_crosapi.c b/bufferinfo/yagi/yagi_crosapi.c
new file mode 100644
index 00000000000000..ad999c3b3580b2
--- /dev/null
+++ b/bufferinfo/yagi/yagi_crosapi.c
@@ -0,0 +1,201 @@
+/*
+ * Copyright (C) 2018-2022 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/* drm_hwc buffer information external supplier that wraps
+ * minigbm gralloc0 perform API.
+ */
+
+#define LOG_TAG "yagi_minigbm_crosapi"
+
+#include <dlfcn.h>
+#include <errno.h>
+#include <hardware/gralloc.h>
+#include <log/log.h>
+#include <string.h>
+
+#include "android_yagi.h"
+
+#define EXPORT __attribute__((visibility("default")))
+
+struct yagi {
+  const gralloc_module_t *gralloc;
+  int refcount;
+};
+
+struct yagi cros_gralloc = {0};
+
+/* ref: Minigbm/cros_gralloc/gralloc0/gralloc0.cc:39 */
+const int kCrosGrallocDrmGetFormat = 1;
+const int kCrosGrallocDrmGetDimensions = 2;
+const int kCrosGrallocDrmGetBufferInfo = 4;
+const int kCrosGrallocDrmGetUsage = 5;
+
+/* ref: Minigbm/cros_gralloc/gralloc0/gralloc0.cc:23 */
+struct CrosGralloc0BufferInfo {
+  uint32_t drm_fourcc;
+  int num_fds;
+  int fds[4];
+  uint64_t modifier;
+  int offset[4];
+  int stride[4];
+};
+
+static int yagi_get_bi_v1(struct yagi *yagi, buffer_handle_t handle,
+                          struct yagi_get_bi_out_v1 *out_buf_info) {
+  struct CrosGralloc0BufferInfo info = {0};
+  int ret = 0;
+  uint32_t usage = 0;
+  uint32_t width = 0;
+  uint32_t height = 0;
+  int32_t droid_format = 0;
+
+  if (handle == NULL) {
+    ALOGE("Invalid arguments");
+    return -EINVAL;
+  }
+
+  ret = yagi->gralloc->perform(yagi->gralloc, kCrosGrallocDrmGetDimensions,
+                               handle, &width, &height);
+  if (ret != 0) {
+    ALOGE(
+        "CROS_GRALLOC_DRM_GET_DIMENSIONS operation has failed. "
+        "Please ensure you are using the latest minigbm.");
+    return ret;
+  }
+
+  ret = yagi->gralloc->perform(yagi->gralloc, kCrosGrallocDrmGetFormat, handle,
+                               &droid_format);
+  if (ret != 0) {
+    ALOGE(
+        "CROS_GRALLOC_DRM_GET_FORMAT operation has failed. "
+        "Please ensure you are using the latest minigbm.");
+    return ret;
+  }
+
+  ret = yagi->gralloc->perform(yagi->gralloc, kCrosGrallocDrmGetUsage, handle,
+                               &usage);
+  if (ret != 0) {
+    ALOGE(
+        "CROS_GRALLOC_DRM_GET_USAGE operation has failed. "
+        "Please ensure you are using the latest minigbm.");
+    return ret;
+  }
+
+  ret = yagi->gralloc->perform(yagi->gralloc, kCrosGrallocDrmGetBufferInfo,
+                               handle, &info);
+  if (ret != 0) {
+    ALOGE(
+        "CROS_GRALLOC_DRM_GET_BUFFER_INFO operation has failed. "
+        "Please ensure you are using the latest minigbm.");
+    return ret;
+  }
+
+  out_buf_info->width = width;
+  out_buf_info->height = height;
+
+  out_buf_info->drm_format = info.drm_fourcc;
+
+  for (int i = 0; i < info.num_fds; i++) {
+    out_buf_info->modifiers[i] = info.modifier;
+    out_buf_info->prime_fds[i] = info.fds[i];
+    out_buf_info->pitches[i] = info.stride[i];
+    out_buf_info->offsets[i] = info.offset[i];
+  }
+
+  out_buf_info->num_planes = info.num_fds;
+  out_buf_info->yagi_flags = 0;
+
+  return 0;
+}
+
+EXPORT int yagi_perform(struct yagi *yagi, struct yagi_in_data *in,
+                        struct yagi_out_data *out) {
+  if (yagi != &cros_gralloc || in == NULL || out == NULL) {
+    ALOGE("Invalid arguments");
+    return -EINVAL;
+  }
+
+  switch (in->cmd_id) {
+    case YAGI_GET_BUFFER_INFO_V1_CMD_ID:
+      if (in->struct_size != sizeof(struct yagi_handle_in) ||
+          out->struct_size != sizeof(struct yagi_get_bi_out_v1)) {
+        ALOGE("Invalid arguments");
+        return -EINVAL;
+      }
+      if (in->test_only) {
+        return 0;
+      } else {
+        struct yagi_handle_in *hnd_in = (void *)in;
+        struct yagi_get_bi_out_v1 *bi_out = (void *)out;
+        return yagi_get_bi_v1(yagi, hnd_in->handle, bi_out);
+      }
+      break;
+  }
+
+  return -ENOTSUP;
+}
+
+const char kCrosGrallocModuleName[] = "CrOS Gralloc";
+
+EXPORT struct yagi *yagi_init() {
+  int ret = 0;
+
+  if (cros_gralloc.refcount == 0) {
+    ret = hw_get_module(GRALLOC_HARDWARE_MODULE_ID,
+                        (const hw_module_t **)&cros_gralloc.gralloc);
+
+    if (ret != 0) {
+      ALOGE("Failed to get gralloc hwmodule");
+      return NULL;
+    }
+
+    ret = strcmp(cros_gralloc.gralloc->common.name, kCrosGrallocModuleName);
+    if (ret != 0) {
+      ALOGE("Gralloc name isn't valid: Expected: \"%s\", Actual: \"%s\"",
+            kCrosGrallocModuleName, cros_gralloc.gralloc->common.name);
+      dlclose(cros_gralloc.gralloc->common.dso);
+      return NULL;
+    }
+
+    if (cros_gralloc.gralloc->perform == NULL) {
+      ALOGE(
+          "CrOS gralloc has no perform call implemented. Please upgrade "
+          "minigbm.");
+      dlclose(cros_gralloc.gralloc->common.dso);
+      return NULL;
+    }
+  }
+
+  cros_gralloc.refcount++;
+  return &cros_gralloc;
+}
+
+EXPORT void yagi_destroy(struct yagi *yagi) {
+  if (yagi != &cros_gralloc || cros_gralloc.refcount == 0) {
+    ALOGE("%s: Invalid arguments", __func__);
+    return;
+  }
+
+  if (cros_gralloc.refcount == 0) {
+    ALOGE("%s: Invalid state", __func__);
+    return;
+  }
+
+  cros_gralloc.refcount--;
+  if (cros_gralloc.refcount == 0) {
+    dlclose(cros_gralloc.gralloc->common.dso);
+  }
+}
-- 
2.37.2

