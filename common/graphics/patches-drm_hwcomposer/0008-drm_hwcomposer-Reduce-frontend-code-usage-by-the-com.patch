From 8c71333a47fcd7577a46716817c4480e72fff9c8 Mon Sep 17 00:00:00 2001
From: Roman Stratiienko <r.stratiienko@gmail.com>
Date: Mon, 26 Dec 2022 23:50:27 +0200
Subject: [PATCH 08/15] drm_hwcomposer: Reduce frontend code usage by the
 compositor code

One more step towards frontend isolation

Change-Id: Ibb3e5a41693f6cb0d6693f2a0c2be7ae2acaae17
Signed-off-by: Roman Stratiienko <r.stratiienko@gmail.com>
---
 backend/Backend.cpp        | 129 +++++++++++++++++--------------------
 backend/Backend.h          |  26 ++++----
 backend/BackendClient.cpp  |  10 +--
 backend/BackendClient.h    |   3 +-
 compositor/FEComposition.h |   1 +
 hwc2_device/HwcDisplay.cpp |  37 ++++++-----
 hwc2_device/HwcDisplay.h   |   1 -
 hwc2_device/HwcLayer.cpp   |  22 +++++++
 hwc2_device/HwcLayer.h     |   7 +-
 9 files changed, 124 insertions(+), 112 deletions(-)

diff --git a/backend/Backend.cpp b/backend/Backend.cpp
index 0c080929b7adda..45d0ab95fe62ad 100644
--- a/backend/Backend.cpp
+++ b/backend/Backend.cpp
@@ -23,110 +23,79 @@
 
 namespace android {
 
-HWC2::Error Backend::ValidateDisplay(HwcDisplay *display, uint32_t *num_types,
-                                     uint32_t *num_requests) {
-  *num_types = 0;
-  *num_requests = 0;
-
-  auto layers = display->GetOrderLayersByZPos();
-
+void Backend::ValidateComposition(FEComposition &comp) {
   int client_start = -1;
   size_t client_size = 0;
 
-  if (display->ProcessClientFlatteningState(layers.size() <= 1)) {
-    display->total_stats().frames_flattened_++;
+  // NOLINTNEXTLINE(): Temporary workaround
+  auto &display = static_cast<HwcDisplay &>(comp);
+
+  auto layers = GetOrderedLayers(comp, &client_start, &client_size);
+
+  if (display.ProcessClientFlatteningState(layers.size() <= 1)) {
+    display.total_stats().frames_flattened_++;
     client_start = 0;
     client_size = layers.size();
-    MarkValidated(layers, client_start, client_size);
+    MarkClient(layers, client_start, client_size);
   } else {
-    std::tie(client_start, client_size) = GetClientLayers(display, layers);
+    ExtendClientRange(display, layers, std::ref(client_start),
+                      std::ref(client_size));
 
-    MarkValidated(layers, client_start, client_size);
+    MarkClient(layers, client_start, client_size);
 
     auto testing_needed = client_start != 0 || client_size != layers.size();
 
     AtomicCommitArgs a_args = {.test_only = true};
 
     if (testing_needed &&
-        display->CreateComposition(a_args) != HWC2::Error::None) {
-      ++display->total_stats().failed_kms_validate_;
+        display.CreateComposition(a_args) != HWC2::Error::None) {
+      ++display.total_stats().failed_kms_validate_;
       client_start = 0;
       client_size = layers.size();
-      MarkValidated(layers, 0, client_size);
-    }
-  }
-
-  *num_types = client_size;
-
-  display->total_stats().gpu_pixops_ += CalcPixOps(layers, client_start,
-                                                   client_size);
-  display->total_stats().total_pixops_ += CalcPixOps(layers, 0, layers.size());
-
-  return *num_types != 0 ? HWC2::Error::HasChanges : HWC2::Error::None;
-}
-
-std::tuple<int, size_t> Backend::GetClientLayers(
-    HwcDisplay *display, const std::vector<HwcLayer *> &layers) {
-  int client_start = -1;
-  size_t client_size = 0;
-
-  for (size_t z_order = 0; z_order < layers.size(); ++z_order) {
-    if (IsClientLayer(display, layers[z_order])) {
-      if (client_start < 0)
-        client_start = (int)z_order;
-      client_size = (z_order - client_start) + 1;
+      MarkClient(layers, 0, client_size);
     }
   }
 
-  return GetExtraClientRange(display, layers, client_start, client_size);
+  display.total_stats().gpu_pixops_ += CalcPixOps(layers, client_start,
+                                                  client_size);
+  display.total_stats().total_pixops_ += CalcPixOps(layers, 0, layers.size());
 }
 
-bool Backend::IsClientLayer(HwcDisplay *display, HwcLayer *layer) {
-  return !HardwareSupportsLayerType(layer->GetSfType()) ||
-         !layer->IsLayerUsableAsDevice() ||
-         display->color_transform_hint() != HAL_COLOR_TRANSFORM_IDENTITY ||
-         (layer->layer_data.pi.RequireScalingOrPhasing() &&
-          display->GetHwc2()->GetResMan().ForcedScalingWithGpu());
-}
-
-bool Backend::HardwareSupportsLayerType(HWC2::Composition comp_type) {
-  return comp_type == HWC2::Composition::Device ||
-         comp_type == HWC2::Composition::Cursor;
-}
-
-uint32_t Backend::CalcPixOps(const std::vector<HwcLayer *> &layers,
-                             size_t first_z, size_t size) {
+auto Backend::CalcPixOps(OrderedLayers &layers, size_t first_z, size_t size)
+    -> uint32_t {
   uint32_t pixops = 0;
-  for (size_t z_order = 0; z_order < layers.size(); ++z_order) {
-    if (z_order >= first_z && z_order < first_z + size) {
-      auto &df = layers[z_order]->layer_data.pi.display_frame;
+  int i = 0;
+  for (auto &l : layers) {
+    if (i >= first_z && i < first_z + size) {
+      auto &df = l.second->layer_data.pi.display_frame;
       pixops += (df.right - df.left) * (df.bottom - df.top);
     }
+    i++;
   }
   return pixops;
 }
 
-void Backend::MarkValidated(std::vector<HwcLayer *> &layers,
-                            size_t client_first_z, size_t client_size) {
-  for (size_t z_order = 0; z_order < layers.size(); ++z_order) {
-    if (z_order >= client_first_z && z_order < client_first_z + client_size)
-      layers[z_order]->SetValidatedType(HWC2::Composition::Client);
-    else
-      layers[z_order]->SetValidatedType(HWC2::Composition::Device);
+void Backend::MarkClient(OrderedLayers &layers, size_t client_first_z,
+                         size_t client_size) {
+  int i = 0;
+  for (auto &l : layers) {
+    if (i >= client_first_z && i < client_first_z + client_size) {
+      l.second->use_client = true;
+    }
+    i++;
   }
 }
 
-std::tuple<int, int> Backend::GetExtraClientRange(
-    HwcDisplay *display, const std::vector<HwcLayer *> &layers,
-    int client_start, size_t client_size) {
-  auto planes = display->GetPipe().GetUsablePlanes();
+void Backend::ExtendClientRange(HwcDisplay &display, OrderedLayers &layers,
+                                int &client_start, size_t &client_size) {
+  auto planes = display.GetPipe().GetUsablePlanes();
   size_t avail_planes = planes.size();
 
   /*
-   * If more layers then planes, save one plane
+   * If more layers than planes, save one plane
    * for client composited layers
    */
-  if (avail_planes < display->fe_layers.size())
+  if (avail_planes < layers.size())
     avail_planes--;
 
   const int extra_client = int(layers.size() - client_size) - int(avail_planes);
@@ -157,8 +126,28 @@ std::tuple<int, int> Backend::GetExtraClientRange(
       }
     }
   }
+}
+
+auto Backend::GetOrderedLayers(FEComposition &comp, int *out_client_start,
+                               size_t *out_client_size) -> OrderedLayers {
+  int client_start = -1;
+  size_t client_size = 0;
+
+  OrderedLayers ordered;
+
+  for (auto &fl : comp.fe_layers) {
+    ordered.emplace(fl.second->zpos, fl.second);
+    if (fl.second->use_client) {
+      if (client_start < 0)
+        client_start = (int)fl.second->zpos;
+      client_size = (fl.second->zpos - client_start) + 1;
+    }
+  }
+
+  *out_client_start = client_start;
+  *out_client_size = client_size;
 
-  return std::make_tuple(client_start, client_size);
+  return ordered;
 }
 
 // clang-format off
diff --git a/backend/Backend.h b/backend/Backend.h
index c24e8181b72063..6cf2e27a88ddd0 100644
--- a/backend/Backend.h
+++ b/backend/Backend.h
@@ -16,27 +16,27 @@
 
 #pragma once
 
+#include "compositor/FEComposition.h"
 #include "hwc2_device/DrmHwcTwo.h"
 
 namespace android {
 
+using OrderedLayers = std::multimap<uint32_t /*z_pos*/,
+                                    std::shared_ptr<FELayer>>;
+
 class Backend {
  public:
   virtual ~Backend() = default;
-  virtual HWC2::Error ValidateDisplay(HwcDisplay *display, uint32_t *num_types,
-                                      uint32_t *num_requests);
-  virtual std::tuple<int, size_t> GetClientLayers(
-      HwcDisplay *display, const std::vector<HwcLayer *> &layers);
-  virtual bool IsClientLayer(HwcDisplay *display, HwcLayer *layer);
+  virtual void ValidateComposition(FEComposition &comp);
 
  protected:
-  static bool HardwareSupportsLayerType(HWC2::Composition comp_type);
-  static uint32_t CalcPixOps(const std::vector<HwcLayer *> &layers,
-                             size_t first_z, size_t size);
-  static void MarkValidated(std::vector<HwcLayer *> &layers,
-                            size_t client_first_z, size_t client_size);
-  static std::tuple<int, int> GetExtraClientRange(
-      HwcDisplay *display, const std::vector<HwcLayer *> &layers,
-      int client_start, size_t client_size);
+  static auto CalcPixOps(OrderedLayers &layers, size_t first_z, size_t size)
+      -> uint32_t;
+  static void MarkClient(OrderedLayers &layers, size_t client_first_z,
+                         size_t client_size);
+  static void ExtendClientRange(HwcDisplay &display, OrderedLayers &layers,
+                                int &client_start, size_t &client_size);
+  static auto GetOrderedLayers(FEComposition &comp, int *out_client_start,
+                               size_t *out_client_size) -> OrderedLayers;
 };
 }  // namespace android
diff --git a/backend/BackendClient.cpp b/backend/BackendClient.cpp
index c67a896590f60d..40744ca51cc99f 100644
--- a/backend/BackendClient.cpp
+++ b/backend/BackendClient.cpp
@@ -20,14 +20,10 @@
 
 namespace android {
 
-HWC2::Error BackendClient::ValidateDisplay(HwcDisplay *display,
-                                           uint32_t *num_types,
-                                           uint32_t * /*num_requests*/) {
-  for (auto &fl : display->fe_layers) {
-    ToHwcLayer(*fl.second).SetValidatedType(HWC2::Composition::Client);
-    ++*num_types;
+void BackendClient::ValidateComposition(FEComposition &comp) {
+  for (auto &fl : comp.fe_layers) {
+    fl.second->use_client = true;
   }
-  return HWC2::Error::HasChanges;
 }
 
 // clang-format off
diff --git a/backend/BackendClient.h b/backend/BackendClient.h
index 1333ecae2b9dfa..1cdb902deae0a2 100644
--- a/backend/BackendClient.h
+++ b/backend/BackendClient.h
@@ -22,7 +22,6 @@ namespace android {
 
 class BackendClient : public Backend {
  public:
-  HWC2::Error ValidateDisplay(HwcDisplay *display, uint32_t *num_types,
-                              uint32_t *num_requests) override;
+  void ValidateComposition(FEComposition &comp) override;
 };
 }  // namespace android
diff --git a/compositor/FEComposition.h b/compositor/FEComposition.h
index bf9633a9730341..726d7fed02d8ec 100644
--- a/compositor/FEComposition.h
+++ b/compositor/FEComposition.h
@@ -21,6 +21,7 @@
 namespace android {
 
 struct FELayer {
+  bool use_client;
   uint32_t zpos;
   LayerData layer_data;
 };
diff --git a/hwc2_device/HwcDisplay.cpp b/hwc2_device/HwcDisplay.cpp
index 0e4d179e1c1b8b..5eda67f3274a20 100644
--- a/hwc2_device/HwcDisplay.cpp
+++ b/hwc2_device/HwcDisplay.cpp
@@ -759,33 +759,36 @@ HWC2::Error HwcDisplay::ValidateDisplay(uint32_t *num_types,
     return HWC2::Error::None;
   }
 
-  /* In current drm_hwc design in case previous frame layer was not validated as
-   * a CLIENT, it is used by display controller (Front buffer). We have to store
-   * this state to provide the CLIENT with the release fences for such buffers.
-   */
+  bool force_client{};
+  if (color_transform_hint() != HAL_COLOR_TRANSFORM_IDENTITY) {
+    ALOGV("Can't scanout. CTM isn't supported yet.");
+    force_client = true;
+  }
+
   for (auto &fl : fe_layers) {
     auto &l = ToHwcLayer(*fl.second);
+    l.use_client = !l.CanScanout() || force_client;
+
+    /* In current drm_hwc design in case previous frame layer was not validated
+     * as a CLIENT, it is used by display controller (Front buffer). We have to
+     * store this state to provide the CLIENT with the release fences for such
+     * buffers.
+     */
     l.SetPriorBufferScanOutFlag(l.GetValidatedType() !=
                                 HWC2::Composition::Client);
   }
 
-  return backend_->ValidateDisplay(this, num_types, num_requests);
-}
-
-std::vector<HwcLayer *> HwcDisplay::GetOrderLayersByZPos() {
-  std::vector<HwcLayer *> ordered_layers;
-  ordered_layers.reserve(fe_layers.size());
+  backend_->ValidateComposition(*this);
 
   for (auto &fl : fe_layers) {
-    ordered_layers.emplace_back(&ToHwcLayer(*fl.second));
+    auto &l = ToHwcLayer(*fl.second);
+    l.UpdateValidatedType();
+    if (l.IsTypeChanged()) {
+      (*num_types)++;
+    }
   }
 
-  std::sort(std::begin(ordered_layers), std::end(ordered_layers),
-            [](const HwcLayer *lhs, const HwcLayer *rhs) {
-              return lhs->zpos < rhs->zpos;
-            });
-
-  return ordered_layers;
+  return *num_types != 0 ? HWC2::Error::HasChanges : HWC2::Error::None;
 }
 
 HWC2::Error HwcDisplay::GetDisplayVsyncPeriod(
diff --git a/hwc2_device/HwcDisplay.h b/hwc2_device/HwcDisplay.h
index 39bf127cecfc08..27dbda75524c32 100644
--- a/hwc2_device/HwcDisplay.h
+++ b/hwc2_device/HwcDisplay.h
@@ -47,7 +47,6 @@ class HwcDisplay : public FEComposition {
   void SetPipeline(DrmDisplayPipeline *pipeline);
 
   HWC2::Error CreateComposition(AtomicCommitArgs &a_args);
-  std::vector<HwcLayer *> GetOrderLayersByZPos();
 
   void ClearDisplay();
 
diff --git a/hwc2_device/HwcLayer.cpp b/hwc2_device/HwcLayer.cpp
index 616bea98d7ee7a..e84d801ea6a004 100644
--- a/hwc2_device/HwcLayer.cpp
+++ b/hwc2_device/HwcLayer.cpp
@@ -18,12 +18,34 @@
 
 #include "HwcLayer.h"
 
+#include "DrmHwcTwo.h"
 #include "HwcDisplay.h"
 #include "bufferinfo/BufferInfoGetter.h"
 #include "utils/log.h"
 
 namespace android {
 
+bool HwcLayer::CanScanout() {
+  if (sf_type_ != HWC2::Composition::Device &&
+      sf_type_ != HWC2::Composition::Cursor) {
+    ALOGV("Can't scanout. SF Type not supported: %d", (int)sf_type_);
+    return false;
+  }
+
+  if (!IsLayerUsableAsDevice()) {
+    ALOGV("Can't scanout. Internal problem.");
+    return false;
+  }
+
+  if (layer_data.pi.RequireScalingOrPhasing() &&
+      parent_->GetHwc2()->GetResMan().ForcedScalingWithGpu()) {
+    ALOGV("Can't scanout. Scaling is disabled by configuration.");
+    return false;
+  }
+
+  return true;
+}
+
 // NOLINTNEXTLINE(readability-convert-member-functions-to-static)
 HWC2::Error HwcLayer::SetCursorPosition(int32_t /*x*/, int32_t /*y*/) {
   return HWC2::Error::None;
diff --git a/hwc2_device/HwcLayer.h b/hwc2_device/HwcLayer.h
index 009b0273af59b1..a0a0203ebbf4d9 100644
--- a/hwc2_device/HwcLayer.h
+++ b/hwc2_device/HwcLayer.h
@@ -38,8 +38,9 @@ class HwcLayer : public FELayer {
   void AcceptTypeChange() {
     sf_type_ = validated_type_;
   }
-  void SetValidatedType(HWC2::Composition type) {
-    validated_type_ = type;
+  void UpdateValidatedType() {
+    validated_type_ = use_client ? HWC2::Composition::Client
+                                 : HWC2::Composition::Device;
   }
   bool IsTypeChanged() const {
     return sf_type_ != validated_type_;
@@ -53,6 +54,8 @@ class HwcLayer : public FELayer {
     prior_buffer_scanout_flag_ = state;
   }
 
+  bool CanScanout();
+
   // Layer hooks
   HWC2::Error SetCursorPosition(int32_t /*x*/, int32_t /*y*/);
   HWC2::Error SetLayerBlendMode(int32_t mode);
-- 
2.37.2

